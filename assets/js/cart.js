// --- CART SYSTEM AROMIEE ---

function getCart() {
  return JSON.parse(localStorage.getItem("cart")) || [];
}

function saveCart(cart) {
  localStorage.setItem("cart", JSON.stringify(cart));
}

function addToCart(product) {
  const cart = getCart();
  const existing = cart.find((item) => item.id === product.id);
  if (existing) {
    existing.quantity += 1;
  } else {
    cart.push({ ...product, quantity: 1 });
  }
  saveCart(cart);
  alert(`‚úÖ ƒê√£ th√™m "${product.name}" v√†o gi·ªè h√†ng!`);
  updateCartCount();
}

function removeFromCart(index) {
  const cart = getCart();
  if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
    cart.splice(index, 1);
    saveCart(cart);
    renderCart();
    updateCartCount();
  }
}

function changeQuantity(index, delta) {
  const cart = getCart();
  cart[index].quantity += delta;
  if (cart[index].quantity <= 0) cart.splice(index, 1);
  saveCart(cart);
  renderCart();
  updateCartCount();
}

// C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë l∆∞·ª£ng nh·ªè tr√™n icon gi·ªè h√†ng
function updateCartCount() {
  const count = getCart().reduce((sum, item) => sum + item.quantity, 0);
  const cartIcons = document.querySelectorAll(".fa-cart-shopping");
  cartIcons.forEach((icon) => {
    let badge = icon.parentElement.querySelector(".cart-count");
    if (!badge) {
      badge = document.createElement("span");
      badge.className =
        "cart-count absolute -top-2 -right-3 bg-pink-600 text-white text-xs rounded-full px-1.5";
      icon.parentElement.style.position = "relative";
      icon.parentElement.appendChild(badge);
    }
    badge.textContent = count;
    badge.style.display = count > 0 ? "inline" : "none";
  });
}

// Render gi·ªè h√†ng trong trang cart.html
function renderCart() {
  const tbody = document.getElementById("cart-items");
  const totalElement = document.querySelector(".text-pink-600");
  if (!tbody) return;

  const cart = getCart();
  tbody.innerHTML = "";
  let total = 0;

  if (cart.length === 0) {
    tbody.innerHTML =
      `<tr><td colspan="5" class="text-center py-10 text-gray-500">üõí Gi·ªè h√†ng tr·ªëng!</td></tr>`;
  } else {
    cart.forEach((item, i) => {
      const subtotal = item.price * item.quantity;
      total += subtotal;
      const row = document.createElement("tr");
      row.className = "border-b hover:bg-gray-50 transition";
      row.innerHTML = `
        <td class="flex items-center gap-4 py-4">
          <img src="${item.image}" class="w-16 h-16 rounded-lg object-cover" />
          <div><h3 class="font-semibold">${item.name}</h3></div>
        </td>
        <td class="text-center text-pink-600 font-semibold">${item.price.toLocaleString()}‚Ç´</td>
        <td class="text-center">
          <div class="flex justify-center items-center">
            <button class="px-2 py-1 bg-gray-200 rounded-l hover:bg-gray-300" onclick="changeQuantity(${i}, -1)">-</button>
            <span class="px-3">${item.quantity}</span>
            <button class="px-2 py-1 bg-gray-200 rounded-r hover:bg-gray-300" onclick="changeQuantity(${i}, 1)">+</button>
          </div>
        </td>
        <td class="text-center font-bold text-gray-800">${subtotal.toLocaleString()}‚Ç´</td>
        <td class="text-center">
          <button class="text-red-500 hover:text-red-700" onclick="removeFromCart(${i})"><i class="fa-solid fa-trash"></i></button>
        </td>`;
      tbody.appendChild(row);
    });
  }

  totalElement.textContent = total.toLocaleString() + "‚Ç´";
}

// Khi t·∫£i trang
document.addEventListener("DOMContentLoaded", () => {
  // G√°n s·ª± ki·ªán "Th√™m v√†o gi·ªè h√†ng"
  document.querySelectorAll(".add-to-cart").forEach((btn) => {
    btn.addEventListener("click", () => {
      const p = btn.closest(".product");
      const product = {
        id: p.dataset.id,
        name: p.dataset.name,
        price: parseInt(p.dataset.price),
        image: p.dataset.image,
      };
      addToCart(product);
    });
  });

  // Render gi·ªè h√†ng n·∫øu ƒëang ·ªü cart.html
  renderCart();
  updateCartCount();
});